name: Debug Dependabot API Issues

on:
  workflow_dispatch:

permissions: write-all

jobs:
  debug-dependabot:
    name: üîç Debug Dependabot API Access
    runs-on: ubuntu-latest
    
    steps:
      - name: Comprehensive Dependabot API Debug
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üîç Starting comprehensive Dependabot API debugging...');
            console.log('=====================================');
            
            // Step 1: Basic repository information
            console.log('üìã Step 1: Repository Information');
            try {
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              console.log(`Repository: ${repo.full_name}`);
              console.log(`Private: ${repo.private}`);
              console.log(`Fork: ${repo.fork}`);
              console.log(`Archived: ${repo.archived}`);
              console.log(`Disabled: ${repo.disabled}`);
              console.log(`Has vulnerability alerts: ${repo.has_vulnerability_alerts}`);
              console.log(`Security and analysis:`, JSON.stringify(repo.security_and_analysis, null, 2));
              console.log(`Default branch: ${repo.default_branch}`);
              console.log(`Visibility: ${repo.visibility}`);
            } catch (error) {
              console.error('‚ùå Failed to get repository info:', error.message);
            }
            
            console.log('\n=====================================');
            
            // Step 2: Check organization settings (if applicable)
            console.log('üè¢ Step 2: Organization Information');
            try {
              if (context.repo.owner !== context.actor) {
                const { data: org } = await github.rest.orgs.get({
                  org: context.repo.owner
                });
                console.log(`Organization: ${org.login}`);
                console.log(`Org type: ${org.type}`);
                console.log(`Plan: ${org.plan?.name || 'unknown'}`);
                
                // Try to get org security settings
                try {
                  const { data: orgSettings } = await github.rest.orgs.get({
                    org: context.repo.owner
                  });
                  console.log(`Advanced Security enabled for org: ${orgSettings.advanced_security_enabled_for_new_repositories}`);
                } catch (orgError) {
                  console.log('Could not access org security settings:', orgError.message);
                }
              } else {
                console.log('Repository owned by user, not organization');
              }
            } catch (error) {
              console.log('Could not get org info:', error.message);
            }
            
            console.log('\n=====================================');
            
            // Step 3: Test Dependabot API endpoints
            console.log('ü§ñ Step 3: Testing Dependabot API Endpoints');
            
            // Test 1: List alerts
            console.log('\nüîç Test 1: Dependabot Alerts API');
            try {
              const { data: alerts } = await github.rest.dependabot.listAlertsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 5
              });
              console.log(`‚úÖ SUCCESS: Found ${alerts.length} Dependabot alerts`);
              
              if (alerts.length > 0) {
                console.log('Sample alert:', {
                  number: alerts[0].number,
                  state: alerts[0].state,
                  severity: alerts[0].security_vulnerability?.severity,
                  package: alerts[0].security_vulnerability?.package?.name,
                  created_at: alerts[0].created_at
                });
              }
            } catch (error) {
              console.error(`‚ùå FAILED: Dependabot Alerts API`);
              console.error(`Status: ${error.status}`);
              console.error(`Message: ${error.message}`);
              console.error(`Response:`, error.response?.data);
              if (error.response?.headers) {
                console.error(`Headers:`, error.response.headers);
              }
            }
            
            // Test 2: List secrets (different API that should work)
            console.log('\nüîç Test 2: Repository Secrets API (for comparison)');
            try {
              const { data: secrets } = await github.rest.actions.listRepoSecrets({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log(`‚úÖ SUCCESS: Repository Secrets API works - found ${secrets.total_count} secrets`);
            } catch (error) {
              console.error(`‚ùå FAILED: Repository Secrets API`);
              console.error(`Status: ${error.status}`);
              console.error(`Message: ${error.message}`);
            }
            
            // Test 3: List repository topics (should always work)
            console.log('\nüîç Test 3: Repository Topics API (basic test)');
            try {
              const { data: topics } = await github.rest.repos.getAllTopics({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log(`‚úÖ SUCCESS: Repository Topics API works - found ${topics.names.length} topics`);
            } catch (error) {
              console.error(`‚ùå FAILED: Repository Topics API`);
              console.error(`Status: ${error.status}`);
              console.error(`Message: ${error.message}`);
            }
            
            console.log('\n=====================================');
            
            // Step 4: Check installation and permissions
            console.log('üîë Step 4: Installation and Permissions Check');
            try {
              // Get the installation for this repository
              const { data: installation } = await github.rest.apps.getRepoInstallation({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log(`Installation ID: ${installation.id}`);
              console.log(`Installation permissions:`, installation.permissions);
            } catch (error) {
              console.log('Could not get installation info:', error.message);
            }
            
            console.log('\n=====================================');
            console.log('üèÅ Debug Complete!');
            
            // Final recommendations
            console.log('\nüí° Troubleshooting Recommendations:');
            console.log('1. If Dependabot API fails with 403: Advanced Security may not be fully activated');
            console.log('2. If Dependabot API fails with 404: Feature may not be available for this repo type');
            console.log('3. If org-level restrictions: Check organization security policies');
            console.log('4. Wait 5-10 minutes after enabling features for them to fully activate');
            console.log('5. Try enabling "Dependabot security updates" from the repo settings'); 