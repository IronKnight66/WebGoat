name: Security Rescan Scheduler

on:
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      rescan_type:
        description: 'Type of rescan to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - incremental
        - critical-only
  # Trigger after Dependabot PRs are merged
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: read
  issues: write
  pull-requests: read
  security-events: write
  actions: read

jobs:
  auto-rescan:
    name: Automated Dependabot Rescan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'dependencies'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Get open security issues
        id: get-issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDABOT_PAT || github.token }}
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,vulnerability',
              state: 'open'
            });
            
            const securityIssues = issues.data
              .filter(issue => issue.title.startsWith('[SECURITY]'))
              .map(issue => ({
                number: issue.number,
                title: issue.title,
                cve: issue.title.match(/CVE-\d{4}-\d+/)?.[0] || issue.title.match(/GHSA-[a-z0-9-]+/)?.[0] || 'Unknown',
                labels: issue.labels.map(l => l.name),
                created_at: issue.created_at,
                updated_at: issue.updated_at
              }));
            
            console.log('Found ' + securityIssues.length + ' open security issues');
            
            // Write to file for later use
            const fs = require('fs');
            fs.writeFileSync('./open_security_issues.json', JSON.stringify(securityIssues, null, 2));
            
            return securityIssues.length;
            
      - name: Create status issue if no open issues
        id: create-status-issue
        if: steps.get-issues.outputs.result == 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDABOT_PAT || github.token }}
          script: |
            const now = new Date();
            const issueTitle = '[SECURITY STATUS] All Clear - ' + now.toLocaleDateString();
            const issueBody = '## 🛡️ Security Status Report\\n\\n' +
              '**Status**: ✅ **ALL CLEAR**\\n' +
              '**Scan Date**: ' + now.toLocaleString() + '\\n' +
              '**Scan Type**: ' + '${{ steps.scan-scope.outputs.scan_type || 'scheduled' }}' + '\\n\\n' +
              '### Summary\\n' +
              '- **Open Security Issues**: 0\\n' +
              '- **Repository Status**: No active security vulnerabilities tracked\\n' +
              '- **Last Scan**: ' + now.toISOString() + '\\n\\n' +
              '### What This Means\\n' +
              '✅ No open Dependabot security alerts requiring attention\\n' +
              '✅ All previously identified vulnerabilities have been resolved\\n' +
              '✅ Security pipeline is actively monitoring for new issues\\n\\n' +
              '### Next Steps\\n' +
              '- Continue regular dependency updates via Dependabot\\n' +
              '- Monitor for new security alerts\\n' +
              '- Review this status in the next scheduled scan\\n\\n' +
              '### Monitoring\\n' +
              '- **Dependabot**: Continuously monitoring for new vulnerabilities\\n' +
              '- **Scheduled Scans**: Daily automated security reviews\\n' +
              '- **Auto-Closure**: This issue will be automatically closed if new vulnerabilities are found\\n\\n' +
              '---\\n' +
              '**Auto-generated by Security Rescan Pipeline** | Workflow: ' + context.workflow + ' | Run: ' + context.runNumber + '\\n\\n' +
              '🎯 **Maintain this status by keeping dependencies up to date!**';
            
            try {
              // Check if there's already an open status issue to avoid duplicates
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'security-status',
                state: 'open'
              });
              
              if (existingIssues.data.length > 0) {
                console.log('Status issue already exists, updating instead of creating new one');
                
                // Update existing status issue
                const existingIssue = existingIssues.data[0];
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  title: issueTitle,
                  body: issueBody
                });
                
                console.log('Updated existing status issue #' + existingIssue.number);
                return existingIssue.number;
              } else {
                // Create new status issue
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: [
                    'security-status',
                    'all-clear',
                    'auto-generated',
                    'monitoring'
                  ]
                });
                
                console.log('Created new security status issue #' + issue.data.number);
                return issue.data.number;
              }
            } catch (error) {
              console.error('Failed to create/update status issue:', error);
              return 0;
            }
            
      - name: Determine scan scope
        id: scan-scope
        run: |
          RESCAN_TYPE="${{ github.event.inputs.rescan_type || 'full' }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            RESCAN_TYPE="incremental"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            # Weekly full scan on Sundays, daily incremental otherwise
            if [ $(date +%u) -eq 7 ]; then
              RESCAN_TYPE="full"
            else
              RESCAN_TYPE="incremental"
            fi
          fi
          
          echo "scan_type=$RESCAN_TYPE" >> $GITHUB_OUTPUT
          echo "Running $RESCAN_TYPE Dependabot rescan"
          
      - name: Build project for dependency analysis
        run: |
          mvn clean compile -DskipTests
          
      - name: Get current Dependabot alerts
        id: fresh-scan
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDABOT_PAT || github.token }}
          script: |
            try {
              let alerts = [];
              
              // Get all current Dependabot alerts based on scan type
              const scanType = '${{ steps.scan-scope.outputs.scan_type }}';
              
              if (scanType === 'critical-only') {
                // Only get critical/high severity alerts
                const allAlerts = await github.rest.dependabot.listAlertsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  per_page: 100
                });
                
                alerts = allAlerts.data.filter(alert => 
                  ['critical', 'high'].includes(alert.security_advisory.severity.toLowerCase())
                );
              } else {
                // Get all alerts for full or incremental scan
                const allAlerts = await github.rest.dependabot.listAlertsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  per_page: 100
                });
                
                alerts = allAlerts.data;
              }
              
              console.log('Found ' + alerts.length + ' current Dependabot alerts (' + scanType + ' scan)');
              
              // Transform to our format
              const vulnerabilities = alerts.map(alert => ({
                alert_number: alert.number,
                cve: alert.security_advisory.cve_id || ('GHSA-' + alert.security_advisory.ghsa_id),
                dependency: alert.dependency.package.name,
                severity: alert.security_advisory.severity,
                state: alert.state,
                created_at: alert.created_at,
                updated_at: alert.updated_at
              }));
              
              // Save current alerts
              const fs = require('fs');
              fs.writeFileSync('./current_dependabot_alerts.json', JSON.stringify(vulnerabilities, null, 2));
              
              return {
                rescan_completed: true,
                total_alerts: vulnerabilities.length,
                current_cves: vulnerabilities.map(v => v.cve)
              };
              
            } catch (error) {
              console.error('Error fetching Dependabot alerts:', error);
              
              if (error.status === 403) {
                console.error('❌ Dependabot alerts are not accessible. Solutions:');
                console.error('  🔑 RECOMMENDED: Set up a Personal Access Token (DEPENDABOT_PAT secret)');
                console.error('  📋 Alternative: Ensure repository has Dependabot alerts enabled');
                console.error('  🔒 For private repos: Enable GitHub Advanced Security');
                console.error('  🏢 Check organization settings allow Dependabot access');
                console.error('');
                console.error('  See README for detailed PAT setup instructions.');
              }
              
              return { rescan_completed: false, total_alerts: 0, current_cves: [] };
            }
            
      - name: Compare with tracked issues
        id: compare-issues
        if: steps.fresh-scan.outputs.rescan_completed == 'true'
        run: |
          python3 -c "
          import json
          import os
          from collections import defaultdict
          
          # Load current Dependabot alerts
          with open('./current_dependabot_alerts.json', 'r') as f:
              current_alerts = json.load(f)
          
          # Load open security issues from GitHub
          with open('./open_security_issues.json', 'r') as f:
              open_issues = json.load(f)
          
          # Extract current CVEs from Dependabot alerts
          current_cves = set(alert['cve'] for alert in current_alerts)
          
          # Find resolved issues (CVEs in GitHub issues but not in current Dependabot alerts)
          resolved_issues = []
          still_present_issues = []
          
          for issue in open_issues:
              issue_cve = issue['cve']
              if issue_cve != 'Unknown':
                  if issue_cve not in current_cves:
                      resolved_issues.append(issue)
                  else:
                      still_present_issues.append(issue)
          
          # Set outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'resolved_count={len(resolved_issues)}\n')
              f.write(f'still_present_count={len(still_present_issues)}\n')
              f.write(f'total_current_vulnerabilities={len(current_cves)}\n')
          
          # Save resolved issues for closure
          with open('./resolved_issues.json', 'w') as f:
              json.dump(resolved_issues, f, indent=2)
          
          # Save current state for tracking
          scan_summary = {
              'scan_date': '$(date -Iseconds)',
              'scan_type': '${{ steps.scan-scope.outputs.scan_type }}',
              'total_vulnerabilities': len(current_cves),
              'resolved_issues': len(resolved_issues),
              'still_present_issues': len(still_present_issues),
              'current_cves': list(current_cves),
              'source': 'dependabot'
          }
          
          with open('./rescan_summary.json', 'w') as f:
              json.dump(scan_summary, f, indent=2)
          
          print(f'Dependabot rescan completed:')
          print(f'  - Current vulnerabilities: {len(current_cves)}')
          print(f'  - Resolved issues: {len(resolved_issues)}')
          print(f'  - Still present: {len(still_present_issues)}')
          "
          
      - name: Close resolved security issues
        id: close-issues
        if: steps.compare-issues.outputs.resolved_count > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDABOT_PAT || github.token }}
          script: |
            const fs = require('fs');
            const resolvedIssues = JSON.parse(fs.readFileSync('./resolved_issues.json', 'utf8'));
            
            const closedIssues = [];
            
            for (const issue of resolvedIssues) {
              try {
                // Add a resolution comment
                const resolutionComment = '## ✅ Vulnerability Resolved\\n\\n' +
                  '**CVE**: `' + issue.cve + '`\\n' +
                  '**Resolution Date**: ' + new Date().toLocaleDateString() + '\\n' +
                  '**Resolution Method**: Dependabot alert resolved - dependency updated or vulnerability patched\\n\\n' +
                  '### Verification\\n' +
                  '- [x] Latest Dependabot scan shows vulnerability no longer present\\n' +
                  '- [x] Dependencies updated to secure versions\\n' +
                  '- [x] No active Dependabot alerts for this CVE\\n\\n' +
                  '### Scan Details\\n' +
                  '- **Scan Type**: ' + '${{ steps.scan-scope.outputs.scan_type }}' + '\\n' +
                  '- **Workflow Run**: #' + context.runNumber + '\\n' +
                  '- **Verification Date**: ' + new Date().toISOString() + '\\n' +
                  '- **Source**: GitHub Dependabot\\n\\n' +
                  '---\\n' +
                  '**Auto-closed by Security Rescan Pipeline**\\n' +
                  'This issue was automatically resolved as the corresponding Dependabot alert is no longer active. ' +
                  'If you believe this closure was premature, please reopen the issue and contact the security team.';
            
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,  
                  issue_number: issue.number,
                  body: resolutionComment
                });
                
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  labels: [...issue.labels, 'resolved', 'auto-closed', 'dependabot-resolved']
                });
                
                closedIssues.push({
                  number: issue.number,
                  cve: issue.cve,
                  title: issue.title
                });
                
                console.log('Closed issue #' + issue.number + ' for resolved CVE ' + issue.cve);
                
              } catch (error) {
                console.error('Failed to close issue #' + issue.number + ':', error);
              }
            }
            
            // Save closure summary
            fs.writeFileSync('./closed_issues.json', JSON.stringify(closedIssues, null, 2));
            
            return closedIssues.length;
            
      - name: Update overdue issues
        id: update-overdue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDABOT_PAT || github.token }}
          script: |
            const fs = require('fs');
            const openIssues = JSON.parse(fs.readFileSync('./open_security_issues.json', 'utf8'));
            
            const now = new Date();
            const overdueIssues = [];
            
            // Check for overdue issues (created more than their target resolution time ago)
            for (const issue of openIssues) {
              const createdDate = new Date(issue.created_at);
              const daysSinceCreation = Math.floor((now - createdDate) / (1000 * 60 * 60 * 24));
              
              // Determine target resolution days based on severity
              let targetDays = 30; // default
              if (issue.labels.includes('critical')) targetDays = 3;
              else if (issue.labels.includes('high')) targetDays = 7;
              else if (issue.labels.includes('medium')) targetDays = 14;
              
              if (daysSinceCreation > targetDays && !issue.labels.includes('overdue')) {
                overdueIssues.push({
                  ...issue,
                  days_overdue: daysSinceCreation - targetDays,
                  target_days: targetDays
                });
              }
            }
            
            // Add overdue labels and comments to overdue issues
            for (const issue of overdueIssues) {
              try {
                const overdueComment = '## ⚠️ Security Issue Overdue\\n\\n' +
                  '**CVE**: `' + issue.cve + '`\\n' +
                  '**Days Overdue**: ' + issue.days_overdue + ' days\\n' +
                  '**Original Target**: ' + issue.target_days + ' days\\n' +
                  '**Created**: ' + new Date(issue.created_at).toLocaleDateString() + '\\n\\n' +
                  'This security vulnerability has exceeded its target resolution timeframe. Please prioritize remediation.\\n\\n' +
                  '### Escalation\\n' +
                  '- [ ] Security team notified\\n' +
                  '- [ ] Management escalation initiated\\n' +
                  '- [ ] Alternative mitigation considered\\n' +
                  '- [ ] Check if Dependabot PR is available\\n\\n' +
                  '### Next Steps\\n' +
                  '1. Review the [Dependabot alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/dependabot)\\n' +
                  '2. Accept any available Dependabot PRs\\n' +
                  '3. Manually update dependencies if needed\\n\\n' +
                  '---\\n' +
                  '**Auto-generated escalation by Security Pipeline**';
            
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: overdueComment
                });
                
                // Add overdue label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['overdue', 'escalated']
                });
                
              } catch (error) {
                console.error('Failed to update overdue issue #' + issue.number + ':', error);
              }
            }
            
            console.log('Updated ' + overdueIssues.length + ' overdue issues');
            return overdueIssues.length;
            
      - name: Generate rescan summary
        run: |
          python3 -c "
          import json
          import os
          from datetime import datetime
          
          # Load scan summary
          with open('./rescan_summary.json', 'r') as f:
              summary = json.load(f)
          
          resolved_count = '${{ steps.compare-issues.outputs.resolved_count || 0 }}'
          closed_count = '${{ steps.close-issues.outputs.result || 0 }}'
          overdue_count = '${{ steps.update-overdue.outputs.result || 0 }}'
          
          print('=== Dependabot Security Rescan Summary ===')
          print(f'Scan Type: {summary[\"scan_type\"]}')
          print(f'Current Dependabot Alerts: {summary[\"total_vulnerabilities\"]}')
          print(f'Issues Resolved: {resolved_count}')
          print(f'Issues Closed: {closed_count}')
          print(f'Overdue Issues Updated: {overdue_count}')
          print(f'Still Present: {summary[\"still_present_issues\"]}')
          print(f'Source: {summary[\"source\"]}')
          print('==========================================')
          "
          
      - name: Upload rescan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependabot-rescan-reports-${{ github.run_number }}
          path: |
            ./current_dependabot_alerts.json
            ./rescan_summary.json
            ./resolved_issues.json
            ./closed_issues.json
            ./open_security_issues.json
          retention-days: 60 