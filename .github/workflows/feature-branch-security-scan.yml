name: Feature Branch Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches-ignore:
      - main
    paths:
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/**'
      - '.github/dependabot.yml'
      - 'src/**'

permissions:
  contents: read
  pull-requests: write
  security-events: read
  actions: read
  issues: write

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout feature branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Build project for dependency analysis
        run: |
          mvn clean compile -DskipTests
          
      - name: Get Dependabot vulnerability alerts
        id: get-alerts
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get all Dependabot alerts for the repository
              const alerts = await github.rest.dependabot.listAlertsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              
              console.log(`Found ${alerts.data.length} open Dependabot alerts`);
              
              // Filter alerts and categorize by severity
              const vulnerabilities = alerts.data.map(alert => ({
                number: alert.number,
                state: alert.state,
                dependency: alert.dependency.package.name,
                vulnerable_version_range: alert.dependency.manifest_path,
                patched_version: alert.security_advisory.patched_versions?.[0] || 'Unknown',
                vulnerability: {
                  cve_id: alert.security_advisory.cve_id || `GHSA-${alert.security_advisory.ghsa_id}`,
                  summary: alert.security_advisory.summary,
                  description: alert.security_advisory.description,
                  severity: alert.security_advisory.severity,
                  cvss_score: alert.security_advisory.cvss?.score || 'N/A',
                  references: alert.security_advisory.references || []
                },
                created_at: alert.created_at,
                updated_at: alert.updated_at
              }));
              
              // Categorize by severity
              const high_vulnerabilities = vulnerabilities.filter(v => 
                ['high', 'critical'].includes(v.vulnerability.severity.toLowerCase())
              );
              const medium_vulnerabilities = vulnerabilities.filter(v => 
                v.vulnerability.severity.toLowerCase() === 'medium'
              );
              
              // Save vulnerability data
              const fs = require('fs');
              const vulnData = {
                total: vulnerabilities.length,
                high: high_vulnerabilities,
                medium: medium_vulnerabilities,
                low: vulnerabilities.filter(v => 
                  v.vulnerability.severity.toLowerCase() === 'low'
                )
              };
              
              fs.writeFileSync('./vulnerability_details.json', JSON.stringify(vulnData, null, 2));
              
              // Set outputs
              core.setOutput('total_count', vulnerabilities.length);
              core.setOutput('high_count', high_vulnerabilities.length);
              core.setOutput('medium_count', medium_vulnerabilities.length);
              core.setOutput('scan_completed', 'true');
              
              return vulnerabilities.length;
              
            } catch (error) {
              console.error('Error fetching Dependabot alerts:', error);
              core.setOutput('scan_completed', 'false');
              core.setOutput('total_count', 0);
              core.setOutput('high_count', 0);
              core.setOutput('medium_count', 0);
              return 0;
            }
            
      - name: Generate vulnerability report comment
        id: generate-comment
        if: steps.get-alerts.outputs.total_count > 0
        run: |
          python3 -c "
          import json
          import os
          
          with open('./vulnerability_details.json', 'r') as f:
              data = json.load(f)
          
          high_vulns = data['high']
          medium_vulns = data['medium']
          low_vulns = data['low']
          
          comment = '''🚨 **Dependabot Security Vulnerability Scan Results**
          
          **Summary**: Found {total} vulnerabilities ({high} High/Critical, {medium} Medium, {low} Low)
          
          '''.format(
              total=data['total'],
              high=len(high_vulns),
              medium=len(medium_vulns),
              low=len(low_vulns)
          )
          
          if high_vulns:
              comment += '''**🔴 High/Critical Severity Issues:**
          '''
              for vuln in high_vulns:
                  comment += f'''
          - **{vuln['dependency']}** - {vuln['vulnerability']['cve_id']}
            - **Impact**: {vuln['vulnerability']['summary']}
            - **CVSS Score**: {vuln['vulnerability']['cvss_score']}
            - **Severity**: {vuln['vulnerability']['severity'].upper()}
            - **Patched Version**: {vuln['patched_version']}
            - **Alert**: [View Details](https://github.com/{os.environ['GITHUB_REPOSITORY']}/security/dependabot/{vuln['number']})
          '''
          
          if medium_vulns:
              comment += '''
          **🟡 Medium Severity Issues:**
          '''
              for vuln in medium_vulns:
                  comment += f'''
          - **{vuln['dependency']}** - {vuln['vulnerability']['cve_id']}
            - **Impact**: {vuln['vulnerability']['summary']}
            - **CVSS Score**: {vuln['vulnerability']['cvss_score']}
            - **Patched Version**: {vuln['patched_version']}
            - **Alert**: [View Details](https://github.com/{os.environ['GITHUB_REPOSITORY']}/security/dependabot/{vuln['number']})
          '''
          
          comment += '''
          **🔧 Remediation Steps:**
          1. Review the Dependabot alerts in the Security tab
          2. Accept Dependabot PRs to update vulnerable dependencies
          3. Or manually update dependencies: \`mvn versions:use-latest-versions\`
          4. Test changes thoroughly before merging
          
          **📈 Next Steps:**
          - Address High/Critical issues before merging
          - Consider updating Medium severity issues
          - Monitor Dependabot for automatic PRs
          
          ---
          📞 **Need Help?** Contact your Application Security Team for assistance with vulnerability remediation.
          
          📊 **View All Alerts**: Check the [Security tab](https://github.com/{os.environ['GITHUB_REPOSITORY']}/security/dependabot) for detailed vulnerability analysis.
          '''
          
          # Write comment to file
          with open('./pr_comment.md', 'w') as f:
              f.write(comment)
          "
          
      - name: Comment on PR with vulnerability results
        if: steps.get-alerts.outputs.total_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('./pr_comment.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Set PR check status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const highCount = '${{ steps.get-alerts.outputs.high_count || 0 }}';
            const mediumCount = '${{ steps.get-alerts.outputs.medium_count || 0 }}';
            const totalCount = '${{ steps.get-alerts.outputs.total_count || 0 }}';
            
            let conclusion = 'success';
            let summary = '✅ No significant security vulnerabilities found';
            
            if (parseInt(highCount) > 0) {
              conclusion = 'failure';
              summary = `❌ Found ${highCount} High/Critical and ${mediumCount} Medium severity vulnerabilities - Please resolve before merging`;
            } else if (parseInt(mediumCount) > 0) {
              conclusion = 'neutral';
              summary = `⚠️ Found ${mediumCount} Medium severity vulnerabilities - Review recommended`;
            }
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Dependabot Security Scan',
              head_sha: context.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: 'Dependabot Security Scan',
                summary: summary,
                text: totalCount > 0 ? `Total vulnerabilities found: ${totalCount}. Review Dependabot alerts in Security tab.` : 'No vulnerabilities detected by Dependabot'
              }
            });
            
      - name: Upload vulnerability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependabot-scan-reports
          path: |
            ./vulnerability_details.json
          retention-days: 30
          
      - name: Fail workflow on high severity vulnerabilities
        if: steps.get-alerts.outputs.high_count > 0
        run: |
          echo "::error::High or Critical severity vulnerabilities found in Dependabot alerts. Please resolve before merging."
          exit 1 