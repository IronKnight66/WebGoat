name: Feature Branch Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches-ignore:
      - main
    paths:
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'src/**'

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write
  actions: read
  id-token: write

jobs:
  security-scan:
    name: üîç Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Feature Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üì¶ Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: üîç Security Vulnerability Analysis
        id: dependabot-scan
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // First, let's check what permissions we have
              console.log('üîç Checking repository and token permissions...');
              
              // Check repository security settings
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              console.log(`Repository: ${repo.full_name}`);
              console.log(`Private: ${repo.private}`);
              console.log(`Security analysis enabled: ${repo.security_and_analysis?.advanced_security?.status || 'unknown'}`);
              
              // Try to get repository vulnerability alerts
              const { data: alerts } = await github.rest.dependabot.listAlertsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                sort: 'created',
                direction: 'desc'
              });
              
              console.log(`‚úÖ Successfully accessed Dependabot alerts: Found ${alerts.length} open vulnerability alerts`);
              
              // Filter for medium+ severity vulnerabilities
              const mediumPlusVulns = alerts.filter(alert => {
                const severity = alert.security_vulnerability.severity.toLowerCase();
                return ['medium', 'high', 'critical'].includes(severity);
              });
              
              console.log(`Found ${mediumPlusVulns.length} medium+ severity vulnerabilities`);
              
              // Set outputs for next steps
              core.setOutput('total-vulns', alerts.length);
              core.setOutput('medium-plus-vulns', mediumPlusVulns.length);
              core.setOutput('vulnerabilities', JSON.stringify(mediumPlusVulns));
              core.setOutput('scan-method', 'dependabot-api');
              core.setOutput('scan-status', 'success');
              
              return mediumPlusVulns;
            } catch (error) {
              console.error('‚ùå Dependabot API Error Details:');
              console.error(`Status: ${error.status}`);
              console.error(`Message: ${error.message}`);
              console.error(`URL: ${error.request?.url}`);
              
              if (error.response?.headers) {
                console.error('Response headers:');
                const relevantHeaders = ['x-accepted-github-permissions', 'x-oauth-scopes', 'x-accepted-oauth-scopes'];
                relevantHeaders.forEach(header => {
                  if (error.response.headers[header]) {
                    console.error(`  ${header}: ${error.response.headers[header]}`);
                  }
                });
              }
              
              // Handle 403 errors with more specific diagnostics
              if (error.status === 403) {
                console.log('üîç Diagnosing 403 Forbidden Error...');
                
                // Check if it's a token permission issue
                if (error.response?.headers['x-accepted-github-permissions']) {
                  console.log('üìã Required permissions:', error.response.headers['x-accepted-github-permissions']);
                }
                
                console.log('üí° Possible causes:');
                console.log('1. Repository-level: Dependabot alerts not enabled');
                console.log('2. Organization-level: Security policies blocking access');
                console.log('3. Token-level: GITHUB_TOKEN lacks required permissions');
                console.log('4. Feature-level: Dependabot not configured for this repository');
                
                console.log('üîß Recommended fixes:');
                console.log('1. Check: Repository Settings ‚Üí Security & analysis ‚Üí Dependabot alerts');
                console.log('2. Check: Organization security policies');
                console.log('3. Try: Using a Personal Access Token with security:read scope');
                console.log('4. Verify: Dependabot.yml configuration exists');
                
                // Set fallback outputs with diagnostic info
                core.setOutput('total-vulns', 0);
                core.setOutput('medium-plus-vulns', 0);
                core.setOutput('vulnerabilities', JSON.stringify([]));
                core.setOutput('scan-method', 'fallback-required');
                core.setOutput('scan-status', 'limited');
                core.setOutput('error-reason', 'Dependabot API access denied - check permissions and configuration');
                core.setOutput('error-details', JSON.stringify({
                  status: error.status,
                  message: error.message,
                  requiredPermissions: error.response?.headers['x-accepted-github-permissions'] || 'unknown'
                }));
                
                return [];
              } else {
                // For other errors, fail the workflow
                core.setFailed(`Failed to fetch vulnerability alerts: ${error.message}`);
              }
            }

      - name: üîß Advanced Troubleshooting
        if: steps.dependabot-scan.outputs.scan-method == 'fallback-required'
        id: troubleshooting
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üîç Running Advanced Troubleshooting...');
            
            try {
              // Check if Dependabot is actually configured
              console.log('üìã Checking Dependabot configuration...');
              
              // Try to get dependabot.yml file
              try {
                const { data: dependabotConfig } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: '.github/dependabot.yml'
                });
                console.log('‚úÖ Dependabot configuration found');
              } catch (configError) {
                if (configError.status === 404) {
                  console.log('‚ö†Ô∏è No .github/dependabot.yml found - Dependabot may not be configured');
                  console.log('üí° This could explain why Dependabot alerts API is not accessible');
                } else {
                  console.log('‚ùì Could not check Dependabot configuration');
                }
              }
              
              // Check organization settings
              console.log('üè¢ Checking organization permissions...');
              try {
                const { data: org } = await github.rest.orgs.get({
                  org: context.repo.owner
                });
                console.log(`Organization: ${org.login}`);
                console.log(`Advanced Security enabled for org: ${org.advanced_security_enabled_for_new_repositories || 'unknown'}`);
              } catch (orgError) {
                console.log('üìù Repository may be personal (not organization)');
              }
              
              console.log('');
              console.log('üöÄ SOLUTIONS TO TRY:');
              console.log('');
              console.log('1. VERIFY DEPENDABOT IS ENABLED:');
              console.log('   ‚Üí Go to: Repository Settings ‚Üí Security & analysis');
              console.log('   ‚Üí Ensure "Dependabot alerts" is enabled');
              console.log('   ‚Üí Ensure "Dependabot security updates" is enabled');
              console.log('');
              console.log('2. CHECK DEPENDABOT CONFIGURATION:');
              console.log('   ‚Üí Ensure .github/dependabot.yml exists and is valid');
              console.log('   ‚Üí Run a manual Dependabot check to populate alerts');
              console.log('');
              console.log('3. ORGANIZATION SETTINGS (if applicable):');
              console.log('   ‚Üí Organization Settings ‚Üí Security & analysis');
              console.log('   ‚Üí Check if organization policies allow Dependabot');
              console.log('');
              console.log('4. ALTERNATIVE: USE PERSONAL ACCESS TOKEN');
              console.log('   ‚Üí Create PAT with "security:read" scope');
              console.log('   ‚Üí Add as repository secret: SECURITY_TOKEN');
              console.log('   ‚Üí Modify workflow to use: secrets.SECURITY_TOKEN');
              
            } catch (error) {
              console.error('Error in troubleshooting:', error.message);
            }

      - name: üîß Fallback Maven Security Check
        if: steps.dependabot-scan.outputs.scan-method == 'fallback-required'
        id: maven-security-check
        run: |
          echo "üîç Running Maven OWASP Dependency Check as fallback..."
          
          # Check if OWASP dependency check plugin is configured
          if grep -q "org.owasp" pom.xml; then
            echo "‚úÖ OWASP plugin found in pom.xml"
            mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7 -DsuppressionFiles=config/dependency-check/project-suppression.xml || true
            
            # Check if report was generated
            if [ -f "target/dependency-check-report.html" ]; then
              echo "üìä Security report generated"
              echo "has-report=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è No security report generated"
              echo "has-report=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è OWASP dependency check plugin not configured"
            echo "üí° Consider adding org.owasp:dependency-check-maven plugin to pom.xml"
            echo "has-report=false" >> $GITHUB_OUTPUT
          fi

      - name: üìä Generate Vulnerability Report
        id: generate-report
        if: steps.dependabot-scan.outputs.medium-plus-vulns > 0 || steps.dependabot-scan.outputs.scan-method == 'fallback-required'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const scanMethod = '${{ steps.dependabot-scan.outputs.scan-method }}';
            const scanStatus = '${{ steps.dependabot-scan.outputs.scan-status }}';
            
            let report = '';
            
            if (scanMethod === 'fallback-required') {
              // Generate report for fallback scenario
              report = '‚ö†Ô∏è **Security Scan Status Report**\n\n';
              report += '**‚ö†Ô∏è Limited Security Scanning Available**\n\n';
              report += '**Issue**: GitHub Advanced Security is not enabled for this repository.\n\n';
              report += '**What this means**:\n';
              report += '- Dependabot vulnerability alerts are not accessible\n';
              report += '- Advanced security scanning features are unavailable\n';
              report += '- Limited vulnerability detection capability\n\n';
              
              const hasReport = '${{ steps.maven-security-check.outputs.has-report }}' === 'true';
              if (hasReport) {
                report += '**‚úÖ Fallback Scan Completed**:\n';
                report += '- Maven OWASP dependency check executed\n';
                report += '- Security report generated in `target/dependency-check-report.html`\n';
                report += '- Check the [Actions summary](../actions) for details\n\n';
              } else {
                report += '**‚ö†Ô∏è Fallback Scan Limited**:\n';
                report += '- OWASP dependency check plugin not properly configured\n';
                report += '- Manual security review recommended\n\n';
              }
              
              report += '**üîß Recommended Actions**:\n';
              report += '1. **Enable GitHub Advanced Security**: Contact your repository administrator\n';
              report += '2. **Configure OWASP Plugin**: Add `org.owasp:dependency-check-maven` to pom.xml\n';
              report += '3. **Manual Review**: Check dependencies for known vulnerabilities\n';
              report += '4. **Regular Updates**: Keep dependencies up to date\n\n';
              
              report += '**üìã How to Enable Full Security Scanning**:\n';
              report += '- For public repositories: GitHub Advanced Security is free\n';
              report += '- For private repositories: Requires GitHub Enterprise license\n';
              report += '- Enable in: Repository Settings ‚Üí Security & analysis ‚Üí GitHub Advanced Security\n\n';
              
              core.setOutput('has-critical-high', 'false');
            } else {
              // Generate normal vulnerability report
              const vulnerabilities = JSON.parse('${{ steps.dependabot-scan.outputs.vulnerabilities }}');
              
              report = 'üö® **Security Vulnerability Scan Results**\n\n';
              
              // Count vulnerabilities by severity
              const severityCounts = {
                critical: 0,
                high: 0,
                medium: 0
              };
              
              vulnerabilities.forEach(vuln => {
                const severity = vuln.security_vulnerability.severity.toLowerCase();
                if (severityCounts.hasOwnProperty(severity)) {
                  severityCounts[severity]++;
                }
              });
              
              report += `**Summary**: Found ${vulnerabilities.length} vulnerabilities (`;
              const summaryParts = [];
              if (severityCounts.critical > 0) summaryParts.push(`${severityCounts.critical} Critical`);
              if (severityCounts.high > 0) summaryParts.push(`${severityCounts.high} High`);
              if (severityCounts.medium > 0) summaryParts.push(`${severityCounts.medium} Medium`);
              report += summaryParts.join(', ') + ')\n\n';
              
              // Group vulnerabilities by severity
              const groupedVulns = {
                critical: [],
                high: [],
                medium: []
              };
              
              vulnerabilities.forEach(vuln => {
                const severity = vuln.security_vulnerability.severity.toLowerCase();
                if (groupedVulns.hasOwnProperty(severity)) {
                  groupedVulns[severity].push(vuln);
                }
              });
              
              // Add Critical/High severity issues
              if (severityCounts.critical > 0 || severityCounts.high > 0) {
                report += '**üî¥ Critical/High Severity Issues:**\n';
                [...groupedVulns.critical, ...groupedVulns.high].forEach(vuln => {
                  const sv = vuln.security_vulnerability;
                  const pkg = sv.package;
                  report += `- **${pkg.name}** v${vuln.dependency.package.version} - ${sv.advisory.cve_id || 'No CVE'}\n`;
                  report += `  - **Impact**: ${sv.advisory.summary}\n`;
                  report += `  - **CVSS Score**: ${sv.advisory.cvss?.score || 'N/A'}\n`;
                  report += `  - **Recommendation**: Update to version ${sv.first_patched_version?.identifier || 'latest'}\n\n`;
                });
              }
              
              // Add Medium severity issues
              if (severityCounts.medium > 0) {
                report += '**üü° Medium Severity Issues:**\n';
                groupedVulns.medium.forEach(vuln => {
                  const sv = vuln.security_vulnerability;
                  const pkg = sv.package;
                  report += `- **${pkg.name}** v${vuln.dependency.package.version} - ${sv.advisory.cve_id || 'No CVE'}\n`;
                  report += `  - **Impact**: ${sv.advisory.summary}\n`;
                  report += `  - **CVSS Score**: ${sv.advisory.cvss?.score || 'N/A'}\n`;
                  report += `  - **Recommendation**: Update to version ${sv.first_patched_version?.identifier || 'latest'}\n\n`;
                });
              }
              
              // Add remediation steps
              report += '**üîß Remediation Steps:**\n';
              report += '1. Update dependencies using: `mvn versions:use-latest-versions`\n';
              report += '2. Review and test changes\n';
              report += '3. Re-run security scan\n\n';
              
              core.setOutput('has-critical-high', (severityCounts.critical + severityCounts.high) > 0 ? 'true' : 'false');
            }
            
            // Add contact information (common for both scenarios)
            report += '---\n';
            report += 'üìû **Need Help?** Contact your Application Security Team at security@company.com for assistance with vulnerability remediation.';
            
            core.setOutput('report', report);

      - name: üí¨ Post PR Comment with Findings
        if: steps.dependabot-scan.outputs.medium-plus-vulns > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const report = `${{ steps.generate-report.outputs.report }}`;
            
            // Check if there's already a comment from this workflow
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Security Vulnerability Scan Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
              console.log('Updated existing PR comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
              console.log('Created new PR comment');
            }

      - name: üö® Set PR Status Check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const scanMethod = '${{ steps.dependabot-scan.outputs.scan-method }}';
            const totalVulns = parseInt('${{ steps.dependabot-scan.outputs.medium-plus-vulns }}');
            const hasCriticalHigh = '${{ steps.generate-report.outputs.has-critical-high }}' === 'true';
            
            let state, description;
            
            if (scanMethod === 'fallback-required') {
              // Handle fallback scenario
              const hasReport = '${{ steps.maven-security-check.outputs.has-report }}' === 'true';
              if (hasReport) {
                state = 'success';
                description = '‚ö†Ô∏è Limited security scan completed - GitHub Advanced Security required for full analysis';
              } else {
                state = 'success';
                description = '‚ö†Ô∏è Basic security check completed - Consider enabling GitHub Advanced Security';
              }
            } else if (totalVulns === 0) {
              state = 'success';
              description = '‚úÖ No medium+ severity vulnerabilities found';
            } else if (hasCriticalHigh) {
              state = 'failure';
              description = `‚ùå Found ${totalVulns} vulnerabilities including Critical/High severity issues`;
            } else {
              state = 'success';
              description = `‚ö†Ô∏è Found ${totalVulns} medium severity vulnerabilities - review recommended`;
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'Security Scan / Vulnerability Check'
            });
            
            console.log(`Set PR status: ${state} - ${description}`);

      - name: üìà Update Workflow Summary
        if: always()
        run: |
          echo "## üîç Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Vulnerabilities**: ${{ steps.dependabot-scan.outputs.total-vulns }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Medium+ Severity**: ${{ steps.dependabot-scan.outputs.medium-plus-vulns }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $([ '${{ steps.dependabot-scan.outputs.medium-plus-vulns }}' -gt 0 ] && echo '‚ö†Ô∏è Vulnerabilities Found' || echo '‚úÖ Clean')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä Check the PR comment for detailed vulnerability information." >> $GITHUB_STEP_SUMMARY 