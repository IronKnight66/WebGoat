name: Main Branch Security Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/**'
      - '.github/dependabot.yml'
      - 'src/**'
  workflow_dispatch:
    inputs:
      force_rescan:
        description: 'Force a complete rescan regardless of previous results'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  security-events: read
  actions: read
  issues: write

jobs:
  main-security-scan:
    name: Main Branch Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Build project for dependency analysis
        run: |
          mvn clean compile -DskipTests
          
      - name: Download previous scan results
        id: download-previous
        continue-on-error: true
        run: |
          # Try to download the latest scan results from artifacts
          echo "previous_scan_found=false" >> $GITHUB_OUTPUT
          
          # Check if we can get previous results from the last successful run
          if [ -f "./previous_scan_results.json" ]; then
            echo "previous_scan_found=true" >> $GITHUB_OUTPUT
          fi
        
      - name: Get current Dependabot alerts
        id: get-current-alerts
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get all current Dependabot alerts
              const alerts = await github.rest.dependabot.listAlertsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              
              console.log(`Found ${alerts.data.length} current Dependabot alerts`);
              
              // Transform alerts to our format
              const vulnerabilities = alerts.data.map(alert => ({
                alert_number: alert.number,
                cve: alert.security_advisory.cve_id || `GHSA-${alert.security_advisory.ghsa_id}`,
                dependency: alert.dependency.package.name,
                severity: alert.security_advisory.severity,
                cvss_score: alert.security_advisory.cvss?.score || 'N/A',
                summary: alert.security_advisory.summary,
                description: alert.security_advisory.description,
                patched_versions: alert.security_advisory.patched_versions || [],
                references: alert.security_advisory.references || [],
                created_at: alert.created_at,
                updated_at: alert.updated_at,
                manifest_path: alert.dependency.manifest_path,
                package_ecosystem: alert.dependency.package.ecosystem
              }));
              
              // Save current alerts
              const fs = require('fs');
              fs.writeFileSync('./current_alerts.json', JSON.stringify(vulnerabilities, null, 2));
              
              return {
                total_count: vulnerabilities.length,
                high_count: vulnerabilities.filter(v => ['high', 'critical'].includes(v.severity.toLowerCase())).length,
                medium_count: vulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length,
                vulnerabilities: vulnerabilities
              };
              
            } catch (error) {
              console.error('Error fetching Dependabot alerts:', error);
              return { total_count: 0, high_count: 0, medium_count: 0, vulnerabilities: [] };
            }
            
      - name: Compare with previous results
        id: compare-results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Load current vulnerabilities
            const currentVulns = JSON.parse(fs.readFileSync('./current_alerts.json', 'utf8'));
            
            // Try to load previous results
            let previousVulns = [];
            try {
              if (fs.existsSync('./previous_scan_results.json')) {
                const prevData = JSON.parse(fs.readFileSync('./previous_scan_results.json', 'utf8'));
                previousVulns = prevData.vulnerabilities || [];
              }
            } catch (error) {
              console.log('No previous scan results found');
            }
            
            // Create sets of CVEs for comparison
            const currentCves = new Set(currentVulns.map(v => v.cve));
            const previousCves = new Set(previousVulns.map(v => v.cve));
            
            // Find new vulnerabilities
            const newVulnerabilities = currentVulns.filter(v => !previousCves.has(v.cve));
            
            // Save comparison results
            const comparisonData = {
              scan_date: new Date().toISOString(),
              total_vulnerabilities: currentVulns.length,
              new_vulnerabilities: newVulnerabilities,
              previous_count: previousVulns.length,
              current_count: currentVulns.length
            };
            
            fs.writeFileSync('./vulnerability_comparison.json', JSON.stringify(comparisonData, null, 2));
            fs.writeFileSync('./new_vulnerabilities.json', JSON.stringify(newVulnerabilities, null, 2));
            
            // Save current scan as previous for next run
            const scanData = {
              scan_date: new Date().toISOString(),
              total_vulnerabilities: currentVulns.length,
              vulnerabilities: currentVulns
            };
            fs.writeFileSync('./current_scan_results.json', JSON.stringify(scanData, null, 2));
            
            console.log(`Total vulnerabilities: ${currentVulns.length}`);
            console.log(`New vulnerabilities: ${newVulnerabilities.length}`);
            
            return {
              total_count: currentVulns.length,
              new_count: newVulnerabilities.length,
              high_count: currentVulns.filter(v => ['high', 'critical'].includes(v.severity.toLowerCase())).length,
              medium_count: currentVulns.filter(v => v.severity.toLowerCase() === 'medium').length,
              has_new_vulnerabilities: newVulnerabilities.length > 0
            };
            
      - name: Create GitHub Issues for new vulnerabilities
        id: create-issues
        if: fromJSON(steps.compare-results.outputs.has_new_vulnerabilities)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newVulnerabilities = JSON.parse(fs.readFileSync('./new_vulnerabilities.json', 'utf8'));
            
            const createdIssues = [];
            
            for (const vuln of newVulnerabilities) {
              // Calculate target resolution date based on severity
              const now = new Date();
              let targetDays = 30; // Default for LOW/MEDIUM
              if (vuln.severity.toLowerCase() === 'high') targetDays = 7;
              if (vuln.severity.toLowerCase() === 'critical') targetDays = 3;
              
              const targetDate = new Date(now.getTime() + (targetDays * 24 * 60 * 60 * 1000));
              
                             const issueTitle = '[SECURITY] ' + vuln.cve + ' in ' + vuln.dependency;
               const issueBody = '## Security Vulnerability Alert\\n\\n' +
                 '**CVE ID**: `' + vuln.cve + '`\\n' +
                 '**Package**: `' + vuln.dependency + '`\\n' +
                 '**Severity**: **' + vuln.severity.toUpperCase() + '**\\n' +
                 '**CVSS Score**: ' + vuln.cvss_score + '\\n' +
                 '**Ecosystem**: ' + vuln.package_ecosystem + '\\n' +
                 '**Manifest**: `' + vuln.manifest_path + '`\\n\\n' +
                 '### Vulnerability Details\\n' +
                 (vuln.description || vuln.summary) + '\\n\\n' +
                 '### Affected Components\\n' +
                 '- [x] Production dependencies\\n' +
                 '- [ ] Development dependencies\\n' +
                 '- [ ] Docker base images\\n\\n' +
                 '### Remediation Plan\\n' +
                 '- [ ] Review Dependabot alert #' + vuln.alert_number + '\\n' +
                 '- [ ] Accept Dependabot PR if available\\n' +
                 '- [ ] Or manually update to patched version: ' + (vuln.patched_versions.join(', ') || 'See advisory') + '\\n' +
                 '- [ ] Test application functionality\\n' +
                 '- [ ] Deploy security patch\\n' +
                 '- [ ] Verify fix resolves alert\\n\\n' +
                 '### Timeline\\n' +
                 '- **Discovered**: ' + new Date(vuln.created_at).toLocaleDateString() + '\\n' +
                 '- **Target Resolution**: ' + targetDate.toLocaleDateString() + '\\n' +
                 '- **Days to Resolve**: ' + targetDays + ' days\\n\\n' +
                 '### References\\n' +
                 vuln.references.slice(0, 5).map(ref => '- [Reference](' + ref.url + ')').join('\\n') + '\\n\\n' +
                 '### Dependabot Alert\\n' +
                 '🔗 **[View Dependabot Alert #' + vuln.alert_number + '](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/dependabot/' + vuln.alert_number + ')**\\n\\n' +
                 '---\\n' +
                 '**Auto-generated by Security Pipeline** | Workflow: ' + context.workflow + ' | Run: ' + context.runNumber + '\\n\\n' +
                 'Contact the Application Security Team for assistance with vulnerability remediation.';
              
              try {
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: [
                    'security',
                    'vulnerability',
                    vuln.severity.toLowerCase(),
                    'dependabot',
                    'auto-generated'
                  ],
                  assignees: ['IronKnight66'] // Replace with actual security team members
                });
                
                createdIssues.push({
                  cve: vuln.cve,
                  issue_number: issue.data.number,
                  issue_url: issue.data.html_url,
                  severity: vuln.severity,
                  alert_number: vuln.alert_number
                });
                
                console.log(\`Created issue #\${issue.data.number} for \${vuln.cve}\`);
                
              } catch (error) {
                console.error(\`Failed to create issue for \${vuln.cve}:\`, error);
              }
            }
            
            // Save created issues info
            fs.writeFileSync('./created_issues.json', JSON.stringify(createdIssues, null, 2));
            
            return createdIssues.length;
            
      - name: Update Security Dashboard
        id: update-dashboard
        run: |
          python3 -c "
          import json
          import os
          from datetime import datetime
          
          # Load current scan results
          with open('./current_scan_results.json', 'r') as f:
              scan_data = json.load(f)
          
          # Create dashboard summary
          dashboard_data = {
              'last_scan': datetime.now().isoformat(),
              'total_vulnerabilities': scan_data['total_vulnerabilities'],
              'high_critical_count': len([v for v in scan_data['vulnerabilities'] if v['severity'].lower() in ['high', 'critical']]),
              'medium_count': len([v for v in scan_data['vulnerabilities'] if v['severity'].lower() == 'medium']),
              'low_count': len([v for v in scan_data['vulnerabilities'] if v['severity'].lower() == 'low']),
              'scan_status': 'completed',
              'workflow_run': '${{ github.run_number }}',
              'commit_sha': '${{ github.sha }}'[:7],
              'scan_type': 'dependabot'
          }
          
          with open('./dashboard_summary.json', 'w') as f:
              json.dump(dashboard_data, f, indent=2)
          
          print('Dashboard updated successfully')
          "
          
      - name: Post summary comment (if triggered by PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const scanResults = JSON.parse(fs.readFileSync('./current_scan_results.json', 'utf8'));
            
            const totalCount = scanResults.total_vulnerabilities;
            const highCount = scanResults.vulnerabilities.filter(v => ['high', 'critical'].includes(v.severity.toLowerCase())).length;
            const mediumCount = scanResults.vulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length;
            
            const comment = '## 📊 Main Branch Security Dashboard Update\\n\\n' +
              '**Latest Dependabot Scan Results:**\\n' +
              '- **Total Vulnerabilities**: ' + totalCount + '\\n' +
              '- **High/Critical**: ' + highCount + '\\n' +
              '- **Medium**: ' + mediumCount + '\\n' +
              '- **Low**: ' + (totalCount - highCount - mediumCount) + '\\n\\n' +
              '**Scan Details:**\\n' +
              '- Workflow Run: #' + context.runNumber + '\\n' +
              '- Commit: ' + context.sha.substring(0, 7) + '\\n' +
              '- Scan Date: ' + new Date().toLocaleString() + '\\n' +
              '- Source: GitHub Dependabot\\n\\n' +
              'View detailed alerts in the [Security tab](' + context.payload.repository.html_url + '/security/dependabot).\\n\\n' +
              '---\\n' +
              '🔍 **Security Pipeline**: Continuous Dependabot monitoring active';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Store results for next comparison
        run: |
          # Copy current results to be used as previous results in next run
          cp ./current_scan_results.json ./scan_results_$(date +%Y%m%d_%H%M%S).json
          
      - name: Create missing artifact files
        if: always()
        run: |
          # Ensure all expected files exist even if empty
          [ ! -f "./current_alerts.json" ] && echo '[]' > ./current_alerts.json
          [ ! -f "./current_scan_results.json" ] && echo '{"scan_date":"'$(date -Iseconds)'","total_vulnerabilities":0,"vulnerabilities":[]}' > ./current_scan_results.json
          [ ! -f "./new_vulnerabilities.json" ] && echo '[]' > ./new_vulnerabilities.json
          [ ! -f "./created_issues.json" ] && echo '[]' > ./created_issues.json
          [ ! -f "./dashboard_summary.json" ] && echo '{"last_scan":"'$(date -Iseconds)'","total_vulnerabilities":0,"scan_status":"completed"}' > ./dashboard_summary.json
          [ ! -f "./vulnerability_comparison.json" ] && echo '{"scan_date":"'$(date -Iseconds)'","total_vulnerabilities":0,"new_vulnerabilities":[],"previous_count":0,"current_count":0}' > ./vulnerability_comparison.json
          
          # List files for debugging
          echo "Files to be uploaded:"
          ls -la ./*.json 2>/dev/null || echo "No JSON files found"
          
      - name: Upload comprehensive reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: main-branch-dependabot-reports
          path: |
            ./current_alerts.json
            ./current_scan_results.json
            ./new_vulnerabilities.json
            ./created_issues.json
            ./dashboard_summary.json
            ./vulnerability_comparison.json
          retention-days: 90
          
      - name: Update repository variables with metrics
        run: |
          # This would typically update GitHub repository variables or external dashboard
          echo "Dependabot security scan completed successfully"
          echo "Total vulnerabilities: ${{ steps.compare-results.outputs.total_count }}"
          echo "New vulnerabilities: ${{ steps.compare-results.outputs.new_count }}"
          echo "High/Critical: ${{ steps.compare-results.outputs.high_count }}"
          echo "Medium: ${{ steps.compare-results.outputs.medium_count }}" 